{"version":3,"file":"static/js/652.4cae8b1f.chunk.js","mappings":"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","sources":["entities/Instructions/Instructions.tsx","entities/PlayerInput/PlayerInput.tsx","entities/PlayerPreview/PlayerPreview.tsx","pages/BattlePage/BattlePage.tsx"],"sourcesContent":["const Instructions: React.FC = () => {\r\n  return (\r\n    <section className=\"instructions-container\">\r\n      <h2>Instructions</h2>\r\n      <ol>\r\n        <li>Enter 2 Github users</li>\r\n        <li>Battle</li>\r\n        <li>See the winners</li>\r\n      </ol>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Instructions;\r\n","import { useState } from \"react\";\r\n\r\ninterface PlayerInputProps {\r\n  label: string;\r\n  onSubmit: (player: string) => void;\r\n}\r\n\r\nconst PlayerInput: React.FC<PlayerInputProps> = ({ label, onSubmit }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n\r\n  const handleSubmit = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    onSubmit(username);\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form className=\"card\" onSubmit={handleSubmit}>\r\n      <label htmlFor=\"username\" className=\"player-label\">\r\n        {label}\r\n      </label>\r\n      <div className=\"input-row\">\r\n        <input\r\n          type=\"text\"\r\n          id=\"username\"\r\n          placeholder=\"github username\"\r\n          autoComplete=\"off\"\r\n          value={username}\r\n          onChange={handleChange}\r\n        />\r\n        <button className=\"btn link\" type=\"submit\" disabled={!username}>\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PlayerInput;\r\n","interface PlayerPreviewProps {\r\n  username: string;\r\n  onReset: () => void;\r\n  label: string;\r\n}\r\n\r\nconst PlayerPreview: React.FC<PlayerPreviewProps> = ({\r\n  username,\r\n  onReset,\r\n  label,\r\n}) => {\r\n  return (\r\n    <article className=\"card\">\r\n      <h3 className=\"player-label\">{label}</h3>\r\n      <div className=\"split\">\r\n        <div className=\"row gap-md\">\r\n          <img\r\n            width={32}\r\n            height={32}\r\n            className=\"avatar\"\r\n            src={`https://github.com/${username}.png?size=200`}\r\n            alt={`Avatar for ${username}`}\r\n          />\r\n          <a href={`https://github.com/${username}`} className=\"link\">\r\n            {username}\r\n          </a>\r\n        </div>\r\n        <button onClick={onReset} className=\"btn secondary icon\">\r\n          Close\r\n        </button>\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default PlayerPreview;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Instructions from \"../../entities/Instructions/Instructions\";\r\nimport PlayerInput from \"../../entities/PlayerInput/PlayerInput\";\r\nimport PlayerPreview from \"../../entities/PlayerPreview/PlayerPreview\";\r\n\r\nconst BattlePage: React.FC = () => {\r\n  const [playerOne, setPlayerOne] = useState<string | null>(null);\r\n  const [playerTwo, setPlayerTwo] = useState<string | null>(null);\r\n\r\n  const handleSubmit = (id: string, player: string) => {\r\n    if (id === \"playerOne\") {\r\n      setPlayerOne(player);\r\n    } else if (id === \"playerTwo\") {\r\n      setPlayerTwo(player);\r\n    }\r\n  };\r\n\r\n  const handleReset = (id: string) => {\r\n    if (id === \"playerOne\") {\r\n      setPlayerOne(null);\r\n    } else if (id === \"playerTwo\") {\r\n      setPlayerTwo(null);\r\n    }\r\n  };\r\n\r\n  const disabled = !playerOne || !playerTwo;\r\n\r\n  return (\r\n    <main className=\"stack main-stack animate-in\">\r\n      <div className=\"split\">\r\n        <h1>Players</h1>\r\n        <Link\r\n          to={{\r\n            pathname: \"/results\",\r\n            search: `?playerOne=${playerOne}&playerTwo=${playerTwo}`,\r\n          }}\r\n          className={`btn primary ${disabled ? \"disabled\" : \"\"}`}\r\n        >\r\n          Battle\r\n        </Link>\r\n      </div>\r\n      <section className=\"grid\">\r\n        {playerOne === null ? (\r\n          <PlayerInput\r\n            label=\"Player One\"\r\n            onSubmit={(player) => handleSubmit(\"playerOne\", player)}\r\n          />\r\n        ) : (\r\n          <PlayerPreview\r\n            label=\"Player One\"\r\n            username={playerOne}\r\n            onReset={() => handleReset(\"playerOne\")}\r\n          />\r\n        )}\r\n        {playerTwo === null ? (\r\n          <PlayerInput\r\n            label=\"Player Two\"\r\n            onSubmit={(player) => handleSubmit(\"playerTwo\", player)}\r\n          />\r\n        ) : (\r\n          <PlayerPreview\r\n            label=\"Player Two\"\r\n            username={playerTwo}\r\n            onReset={() => handleReset(\"playerTwo\")}\r\n          />\r\n        )}\r\n      </section>\r\n      <Instructions />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default BattlePage;\r\n"],"names":["Instructions","_jsxs","className","children","_jsx","_ref","label","onSubmit","username","setUsername","useState","event","preventDefault","htmlFor","type","id","placeholder","autoComplete","value","onChange","target","disabled","onReset","width","height","src","concat","alt","href","onClick","BattlePage","playerOne","setPlayerOne","playerTwo","setPlayerTwo","handleSubmit","player","handleReset","Link","to","pathname","search","PlayerInput","PlayerPreview"],"sourceRoot":""}
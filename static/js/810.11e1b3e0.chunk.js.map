{"version":3,"file":"static/js/810.11e1b3e0.chunk.js","mappings":"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","sources":["pages/PopularPage/api/api.ts","widgets/Card/Card.tsx","pages/ResultsPage/ResultsPage.tsx","entities/withSearchParams/withSearchParams.tsx"],"sourcesContent":["import { Profile } from \"../../../app/types/profiles\";\r\n\r\nconst id: string = \"YOUR_CLIENT_ID\";\r\nconst sec: string = \"YOUR_SECRET_ID\";\r\nconst params: string = `?client_id=${id}&client_secret=${sec}`;\r\n\r\nexport function fetchPopularRepos(language: string): Promise<any[]> {\r\n  const endpoint: string = window.encodeURI(\r\n    `https://api.github.com/search/repositories?q=stars:>1+language:${language}&sort=stars&order=desc&type=Repositories`\r\n  );\r\n\r\n  return fetch(endpoint)\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      if (!data.items) {\r\n        throw new Error(data.message);\r\n      }\r\n      return data.items;\r\n    });\r\n}\r\n\r\nfunction getErrorMsg(message: string, username: string): string {\r\n  if (message === \"Not Found\") {\r\n    return `${username} doesn't exist`;\r\n  }\r\n  return message;\r\n}\r\n\r\nfunction getProfile(username: string): Promise<any> {\r\n  return fetch(`https://api.github.com/users/${username}${params}`)\r\n    .then((res) => res.json())\r\n    .then((profile) => {\r\n      if (profile.message) {\r\n        throw new Error(getErrorMsg(profile.message, username));\r\n      }\r\n      return profile;\r\n    });\r\n}\r\n\r\nfunction getRepos(username: string): Promise<any[]> {\r\n  return fetch(\r\n    `https://api.github.com/users/${username}/repos${params}&per_page=100`\r\n  )\r\n    .then((res) => res.json())\r\n    .then((repos) => {\r\n      if (repos.message) {\r\n        throw new Error(getErrorMsg(repos.message, username));\r\n      }\r\n      return repos;\r\n    });\r\n}\r\n\r\nfunction getStarCount(repos: any[]): number {\r\n  return repos.reduce((count, { stargazers_count }) => {\r\n    return count + stargazers_count;\r\n  }, 0);\r\n}\r\n\r\nfunction calculateScore(followers: number, repos: any[]): number {\r\n  return followers * 3 + getStarCount(repos);\r\n}\r\n\r\nfunction getUserData(\r\n  player: string\r\n): Promise<{ profile: Profile; score: number }> {\r\n  return Promise.all([getProfile(player), getRepos(player)]).then(\r\n    ([profile, repos]) => ({\r\n      profile,\r\n      score: calculateScore(profile.followers, repos),\r\n    })\r\n  );\r\n}\r\n\r\nfunction sortPlayers(players: { score: number }[]): { score: number }[] {\r\n  return players.sort((a, b) => b.score - a.score);\r\n}\r\n\r\nexport function battle(players: string[]): Promise<{ score: number }[]> {\r\n  return Promise.all([getUserData(players[0]), getUserData(players[1])]).then(\r\n    sortPlayers\r\n  );\r\n}\r\n","import { Profile } from \"../../app/types/profiles\";\r\n\r\nfunction Card({ profile }: { profile: Profile }) {\r\n  const {\r\n    login,\r\n    avatar_url,\r\n    html_url,\r\n    followers,\r\n    following,\r\n    public_repos,\r\n    location,\r\n    company,\r\n  } = profile;\r\n\r\n  return (\r\n    <div className=\"card bg-light\">\r\n      <header className=\"split\">\r\n        <div>\r\n          <h4>\r\n            <a href={html_url}>{login}</a>\r\n          </h4>\r\n          <p>{location || \"unknown\"}</p>\r\n        </div>\r\n        <img\r\n          className=\"avatar large\"\r\n          src={avatar_url}\r\n          alt={`Avatar for ${login}`}\r\n        />\r\n      </header>\r\n      <ul className=\"stack\">\r\n        <li className=\"split\">\r\n          <span>Name:</span> <span>{login || \"n/a\"}</span>\r\n        </li>\r\n        <li className=\"split\">\r\n          <span>Company:</span> <span>{company || \"n/a\"}</span>\r\n        </li>\r\n        <li className=\"split\">\r\n          <span>Followers:</span> <span>{followers}</span>\r\n        </li>\r\n        <li className=\"split\">\r\n          <span>Following:</span> <span>{following}</span>\r\n        </li>\r\n        <li className=\"split\">\r\n          <span>Repositories:</span> <span>{public_repos}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { battle } from \"../PopularPage/api/api\";\r\nimport Loading from \"../../shared/Loading/Loading\";\r\nimport withSearchParams from \"../../entities/withSearchParams/withSearchParams\";\r\nimport { Player } from \"../../app/types/profiles\";\r\nimport Card from \"../../widgets/Card/Card\";\r\n\r\nfunction ResultsPage({\r\n  router,\r\n}: {\r\n  router: { searchParams: URLSearchParams };\r\n}) {\r\n  const [winner, setWinner] = useState<Player | null>(null);\r\n  const [loser, setLoser] = useState<Player | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const sp = router.searchParams;\r\n    const playerOne = sp.get(\"playerOne\");\r\n    const playerTwo = sp.get(\"playerTwo\");\r\n\r\n    if (playerOne === null || playerTwo === null) {\r\n      setError(\"Players not found\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    battle([playerOne, playerTwo])\r\n      .then((players) => {\r\n        //@ts-ignore\r\n        setWinner(players[0]);\r\n        //@ts-ignore\r\n        setLoser(players[1]);\r\n        setError(null);\r\n        setLoading(false);\r\n      })\r\n      .catch(({ message }) => {\r\n        setError(message);\r\n        setLoading(false);\r\n      });\r\n  }, [router.searchParams]);\r\n\r\n  if (loading) {\r\n    return <Loading text=\"Battling\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"text-center error\">{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <main className=\"animate-in stack main-stack\">\r\n      <div className=\"split\">\r\n        <h1>Results</h1>\r\n        <Link to=\"/battle\" className=\"btn secondary\">\r\n          Reset\r\n        </Link>\r\n      </div>\r\n      <section className=\"grid\">\r\n        <article className=\"results-container\">\r\n          <Card profile={winner!.profile} />\r\n          <p className=\"results\">\r\n            <span>\r\n              {winner!.score === loser!.score ? \"Tie\" : \"Winner\"}{\" \"}\r\n              {winner!.score.toLocaleString()}\r\n            </span>\r\n            {winner!.score !== loser!.score && (\r\n              <img\r\n                width={80}\r\n                src=\"https://ui.dev/images/certificate.svg\"\r\n                alt=\"Certificate\"\r\n              />\r\n            )}\r\n          </p>\r\n        </article>\r\n        <article className=\"results-container\">\r\n          <Card profile={loser!.profile} />\r\n          <p className=\"results\">\r\n            <span>\r\n              {winner!.score === loser!.score ? \"Tie\" : \"Loser\"}{\" \"}\r\n              {loser!.score.toLocaleString()}\r\n            </span>\r\n          </p>\r\n        </article>\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default withSearchParams(ResultsPage);\r\n","import { useSearchParams } from \"react-router-dom\";\r\n\r\ntype ComponentProps = {\r\n  router: { searchParams: URLSearchParams };\r\n};\r\n\r\ntype Props = {\r\n  [key: string]: any;\r\n};\r\n\r\nexport default function withSearchParams(\r\n  Component: React.ComponentType<ComponentProps>\r\n) {\r\n  return function ComponentWithSearchParams(props: Props) {\r\n    const [searchParams] = useSearchParams();\r\n\r\n    return <Component {...props} router={{ searchParams }} />;\r\n  };\r\n}\r\n"],"names":["params","concat","fetchPopularRepos","language","endpoint","window","encodeURI","fetch","then","res","json","data","items","Error","message","getErrorMsg","username","getRepos","repos","calculateScore","followers","reduce","count","_ref","stargazers_count","getStarCount","getUserData","player","Promise","all","profile","_ref2","score","sortPlayers","players","sort","a","b","battle","login","avatar_url","html_url","following","public_repos","location","company","_jsxs","className","children","_jsx","href","src","alt","Component","router","winner","setWinner","useState","loser","setLoser","error","setError","loading","setLoading","useEffect","sp","searchParams","playerOne","get","playerTwo","catch","Loading","text","Link","to","Card","toLocaleString","width","props","useSearchParams"],"sourceRoot":""}